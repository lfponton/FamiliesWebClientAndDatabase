@page "/EditAdult/{familyId:int}/{Id:int}"
@using Models
@using FamiliesManager.Data
@inject IAdultsService AdultsService
@inject NavigationManager NavigationManager

<h3>Edit Adult</h3>

@if (adultToEdit == null)
{
    <em>Adult not found!</em>
}
else
{
    <EditForm Model="@adultToEdit" OnValidSubmit="@Save">
        <DataAnnotationsValidator/>
        <!-- ValidationSummary has the same name in AspNetCore and in Blazorise -->
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary/>

        <div class="form-group">
            First Name:<br/>
            <InputTextArea rows="1" @bind-Value="adultToEdit.FirstName"/>
        </div>
        <div class="form-group">
            Last Name:<br/>
            <InputTextArea rows="1" @bind-Value="adultToEdit.LastName"/>
        </div>
        <div class="form-group">
            Hair Color:<br/>
            <InputTextArea rows="1" @bind-Value="adultToEdit.HairColor"/>
        </div>
        <div class="form-group">
            Eye Color:<br/>
            <InputTextArea rows="1" @bind-Value="adultToEdit.EyeColor"/>
        </div>
        <div class="form-group">
            Age:<br/>
            <InputNumber @bind-Value="adultToEdit.Age"/>
        </div>
        <div class="form-group">
            Height:<br/>
            <InputNumber @bind-Value="adultToEdit.Height"/>
        </div>
        <div class="form-group">
            Weight:<br/>
            <InputNumber @bind-Value="adultToEdit.Weight"/>
        </div>
        <div class="form-group">
            Sex:<br/>
            <InputTextArea rows="1" @bind-Value="adultToEdit.Sex"/>
        </div>
        <div class="form-group">
            JobTitle:<br/>
            <InputTextArea rows="1" @bind-Value="jobToEdit.JobTitle"/>
        </div>
        <div class="form-group">
            Salary:<br/>
            <InputNumber @bind-Value="jobToEdit.Salary"/>
        </div>
        <p class="actions">
            <button class="btn btn-outline-dark" type="submit">Edit Adult</button>
        </p>
    </EditForm>
}

@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int familyId { get; set; }
    

    private Adult adultToEdit;
    private Job jobToEdit;

    protected override async Task OnInitializedAsync()
    {
        adultToEdit = await AdultsService.GetAdultAsync(familyId, Id);
        jobToEdit = adultToEdit.Job;
    }

    private async Task Save()
    {
        adultToEdit.Job = jobToEdit;
        await AdultsService.UpdateAdultAsync(familyId, adultToEdit);
        NavigationManager.NavigateTo($"/ViewFamily/{familyId}");
    }

}